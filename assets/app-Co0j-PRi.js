const v="wall";class k{constructor(t,e,r){this.board=document.getElementById(t),this.rows=e,this.cols=r,this.currentDelay=0,this.start_cell=null,this.target_cell=null,this.isMouseDown=!1,this.addWallEventListeners(),this.visitedNodes=[],this.foundPath=[]}initializeElements(){for(let t=0;t<this.rows;t++){let e=this.board.insertRow(t);for(let r=0;r<this.cols;r++)e.insertCell(r)}}resetDelayTime(){this.currentDelay=0}resetBoard(){this.clearBoard(),this.clearWalls(),this.resetDelayTime(),this.resetStartAndTarget()}clearBoard(){this.visitedNodes.forEach((t,e)=>{this.board.rows[t.row].cells[t.col].classList.remove("visitedNode")}),this.foundPath.forEach((t,e)=>{this.board.rows[t.row].cells[t.col].classList.remove("shortestPath")}),this.resetDelayTime()}fillWithWalls(){this.board.classList.add("fill-walls")}clearWalls(){for(let t=0;t<this.rows;t++)for(let e=0;e<this.cols;e++)this.board.rows[t].cells[e].classList.remove(v)}resetStartAndTarget(){this.start_cell!=null&&this.start_cell.dom.classList.remove("start-cell"),this.target_cell!=null&&this.target_cell.dom.classList.remove("target-cell"),this.start_cell=null,this.target_cell=null}visualizeVisitedNodes(t){t.forEach((e,r)=>{if(this.isStart(e)||this.isTarget(e))return;const s=this.board.rows[e.row].cells[e.col];setTimeout(()=>{s.className="visitedNode"},r*2+this.currentDelay)}),this.currentDelay+=t.length*2,this.visitedNodes=t}visualizeFoundPath(t){t.forEach((e,r)=>{if(this.isStart(e)||this.isTarget(e))return;const s=this.board.rows[e.row].cells[e.col];setTimeout(()=>{s.className="shortestPath"},r*5+this.currentDelay)}),this.currentDelay+=t.length*5,this.foundPath=t}valid_cell(t){return!(t.row<0||t.col<0||t.row>=this.rows||t.col>=this.cols)}getRandomCell(){let t=Math.floor(Math.random()*this.rows),e=Math.floor(Math.random()*this.cols);return{row:t,col:e}}getCell(t,e){return{dom:this.board.rows[t].cells[e],row:t,col:e}}generateStartAndTarget(){let t=null;do t=this.getRandomCell();while(this.isWall(this.getCell(t.row,t.col)));let e=null;do e=this.getRandomCell();while(e.row===t.row&&e.col===t.col||this.isWall(this.getCell(e.row,e.col)));this.setStartAndTarget(t,e)}setStartAndTarget(t,e){this.resetStartAndTarget(),this.start_cell=t,this.start_cell.dom=this.board.rows[t.row].cells[t.col],this.start_cell.dom.classList.add("start-cell"),this.target_cell=e,this.target_cell.dom=this.board.rows[e.row].cells[e.col],this.target_cell.dom.classList.add("target-cell")}addWallEventListeners(){this.board.addEventListener("dragstart",t=>t.preventDefault()),this.board.addEventListener("mousedown",t=>{t.preventDefault(),this.isMouseDown=!0,t.target.tagName==="TD"&&this.toggleWall(t.target)}),this.board.addEventListener("mouseover",t=>{this.isMouseDown&&t.target.tagName==="TD"&&this.toggleWall(t.target)}),window.addEventListener("mouseup",()=>{this.isMouseDown=!1})}resetToWalls(){this.clearBoard(),this.resetDelayTime(),this.resetStartAndTarget();const t=document.createDocumentFragment();for(let e=0;e<this.rows;e++){const r=document.createElement("tr");for(let s=0;s<this.cols;s++){const l=document.createElement("td");l.classList.add("wall"),r.appendChild(l)}t.appendChild(r)}this.board.innerHTML="",this.board.appendChild(t)}toggleWall(t){const e=t.parentNode.rowIndex,r=t.cellIndex;this.start_cell&&e===this.start_cell.row&&r===this.start_cell.col||this.target_cell&&e===this.target_cell.row&&r===this.target_cell.col||t.classList.add(v)}untoggleWall(t){t.classList.remove(v)}isWall(t){return this.board.rows[t.row].cells[t.col].classList.contains(v)}isTarget(t){return t.row===this.target_cell.row&&t.col===this.target_cell.col}isStart(t){return t.row===this.start_cell.row&&t.col===this.start_cell.col}}class T{constructor(){this.values=[]}enqueue(t,e){let r=!1;for(let s=0;s<this.values.length;s++)if(this.values[s].priority>e){this.values.splice(s,0,{node:t,priority:e}),r=!0;return}r||this.values.push({node:t,priority:e})}dequeue(){return this.values.shift()}size(){return this.values.length}}const f=(c,t,e)=>!t.valid_cell(c)||t.isWall(c)||e.find(r=>r.row===c.row&&r.col===c.col),M=(c,t)=>c.row===t.row&&c.col===t.col,B=(c,t)=>Math.abs(c.row-t.row)+Math.abs(c.col-t.col),p=Object.freeze({BFS:"BFS",DFS:"DFS",DIJIKSTRA:"Dijikstra",A_STAR:"A*"}),u=[[0,1],[1,0],[0,-1],[-1,0]];class m{constructor(){this.supported_algorithms=p,this.current_algorithm=p.BFS,this.selector_dom=null}initializeAlgorithmSelector(t){this.selector_dom=t;for(var[e,r]of Object.entries(this.supported_algorithms)){var s=document.createElement("option");s.value=r,s.innerHTML=r,t.appendChild(s)}t.value=this.current_algorithm}setAlgorithm(t){this.current_algorithm=t}findPath(t,e,r){switch(this.current_algorithm){case p.BFS:return m.BFS(t,e,r);case p.DFS:return m.DFS(t,e,r);case p.DIJIKSTRA:return m.Dijikstra(t,e,r);case p.A_STAR:return m.AStar(t,e,r);default:return console.log("Unsupported option ",this.current_algorithm),{visited_nodes:[],found_path:[]}}}static BFS(t,e,r){let s=[],l=[];for(l.push({...e,prev:[e]}),s.push(e);l.length>0;){const o=l.shift();for(let i=0;i<u.length;i++){const n={row:o.row+u[i][0],col:o.col+u[i][1]};if(f(n,t,s))continue;s.push(n);const a=[...o.prev,n];if(M(n,r))return{visited_nodes:s,found_path:a};l.push({...n,prev:a})}}return{visited_nodes:s,found_path:[]}}static DFS(t,e,r){let s=[];return m.DFSImpl(t,e,r,s)}static DFSImpl(t,e,r,s){if(s.push(e),M(e,r))return{visited_nodes:s,found_path:[e]};for(let l=0;l<u.length;l++){const o={row:e.row+u[l][0],col:e.col+u[l][1]};if(f(o,t,s))continue;const{found_path:i}=m.DFSImpl(t,o,r,s);if(i.length>0)return{visited_nodes:s,found_path:[e,...i]}}return{visited_nodes:s,found_path:[]}}static Dijikstra(t,e,r){let s=[],l=new T;for(l.enqueue({...e,path:[e]},0);l.size()>0;){const{node:o,priority:i}=l.dequeue();if(M(o,r))return{visited_nodes:s,found_path:o.path};if(!f(o,t,s)){s.push(o);for(let n=0;n<u.length;n++){const a={row:o.row+u[n][0],col:o.col+u[n][1]};f(a,t,s)||l.enqueue({...a,path:[...o.path,a]},i+1)}}}return{visited_nodes:s,found_path:[]}}static AStar(t,e,r){let s=[],l=new T;for(l.enqueue({...e,path:[e],distance:0,heuristic:0},0);l.size()>0;){const{node:o}=l.dequeue();if(M(o,r))return{visited_nodes:s,found_path:o.path};if(!f(o,t,s)){s.push(o);for(let i=0;i<u.length;i++){const n={row:o.row+u[i][0],col:o.col+u[i][1]};if(!f(n,t,s)){let a={...n,path:[...o.path,n],distance:o.distance+1,heuristic:B(n,r)};l.enqueue(a,a.distance+a.heuristic)}}}}return{visited_nodes:s,found_path:[]}}}const g={PRIM:"Prim",KRUSKAL:"Kruskal",RECURSIVE_BACKTRACKING:"Recursive Backtracking",ELLER:"Eller"},E=[[0,1],[1,0],[0,-1],[-1,0]],S={HORIZONTAL:[0,1],VERTICAL:[1,0]};Object.freeze(g);class y{constructor(){this.currentAlgorithm=g.PRIM}setAlgorithm(t){this.currentAlgorithm=t}generateMaze(t){switch(this.initializeMaze(t),this.currentAlgorithm){case g.PRIM:this.primMaze(t);break;case g.KRUSKAL:this.kruskalMaze(t);break;case g.RECURSIVE_BACKTRACKING:this.recursiveBacktrackingMaze(t);break;case g.ELLER:this.ellersMaze(t);break;default:console.error("Unknown maze generation algorithm");return}setTimeout(()=>{let e={row:0,col:0},r={row:t.rows-1,col:t.cols-1};t.setStartAndTarget(e,r)},this.currentDelay)}animateMaze(t,e){setTimeout(()=>{e.forEach(r=>{r.dom&&(r.dom.classList.add("maze-reveal"),t.untoggleWall(r.dom))})},this.currentDelay),this.currentDelay+=10}initializeMaze(t){this.currentDelay=2e3,t.resetToWalls()}isValidFrontier(t,e){return t.valid_cell(e)&&t.isWall(e)}replaceFlag(t,e,r){for(let s=0;s<t.length;s+=2)for(let l=0;l<t[s].length;l+=2)t[s][l]===e&&(t[s][l]=r);return t}initializeMazeSelector(t){const e=Object.values(g);t.innerHTML="",e.forEach(r=>{const s=document.createElement("option");s.value=r,s.text=`${r}'s Algorithm`,t.appendChild(s)})}primMaze(t){const e=Math.floor(Math.random()*t.rows/2)*2,r=Math.floor(Math.random()*t.cols/2)*2,s=t.getCell(e,r);this.animateMaze(t,[s]);const l=new Set;l.add(`${s.row},${s.col}`);const o=E.map(i=>({row:s.row+i[0]*2,col:s.col+i[1]*2,direction:i})).filter(i=>this.isValidFrontier(t,i,[]));for(;o.length>0;){const i=Math.floor(Math.random()*o.length),n=o[i];o.splice(i,1);const a=`${n.row},${n.col}`;if(!l.has(a)&&(l.add(a),this.isValidFrontier(t,n))){const w={row:n.row-n.direction[0],col:n.col-n.direction[1]};w.dom=t.getCell(w.row,w.col).dom,n.dom=t.getCell(n.row,n.col).dom,this.animateMaze(t,[n,w]),E.forEach(h=>{const _={row:n.row+h[0]*2,col:n.col+h[1]*2,direction:h};o.push(_)})}}}kruskalMaze(t){const e=[];let r=1,s=new Array(t.rows).fill(0).map(()=>new Array(t.cols).fill(0));for(let l=0;l<t.rows;l+=2)for(let o=0;o<t.cols;o+=2)o+S.HORIZONTAL[1]*2<t.cols&&e.push({row:l,col:o,direction:S.HORIZONTAL}),l+S.VERTICAL[0]*2<t.rows&&e.push({row:l,col:o,direction:S.VERTICAL}),s[l][o]=r,r++;for(;e.length>0;){const l=Math.floor(Math.random()*e.length),o=e[l],i={row:o.row+o.direction[0]*2,col:o.col+o.direction[1]*2};if(s[i.row][i.col]!==s[o.row][o.col]){const n=s[i.row][i.col],a=s[o.row][o.col];s=this.replaceFlag(s,n,a);const w=[];for(let h=o.row;h<=i.row;h++)for(let _=o.col;_<=i.col;_++){const R=t.getCell(h,_);w.push(R)}this.animateMaze(t,w)}e.splice(l,1)}}recursiveBacktrackingMaze(t){let e=t.getCell(0,0),r=new Array(t.rows).fill(0).map(()=>new Array(t.cols).fill(!1));this.recursiveBacktrackingImpl(t,e,r)}recursiveBacktrackingImpl(t,e,r){r[e.row][e.col]=!0,this.animateMaze(t,[t.getCell(e.row,e.col)]);const s=E.map(l=>({row:e.row+l[0]*2,col:e.col+l[1]*2,direction:l})).filter(l=>t.valid_cell(l)&&!r[l.row][l.col]);for(;s.length>0;){const l=Math.floor(Math.random()*s.length),o=s[l];s.splice(l,1),!r[o.row][o.col]&&(this.animateMaze(t,[t.getCell(o.row-o.direction[0],o.col-o.direction[1])]),this.recursiveBacktrackingImpl(t,o,r))}}ellersMaze(t){let e=new Uint16Array(t.cols);for(let s=0;s<t.cols;s++)e[s]=s;let r=new Map;e.forEach(s=>{s%2!=1&&r.set(s,[s])});for(let s=0;s<t.rows;s+=2){let l=s+2>=t.rows;for(let i=0;i<t.cols-2;i+=2)e[i]!=e[i+2]&&(l||Math.floor(Math.random()*2))&&(this.mergeSetInRow(e,e[i],e[i+2],r),this.animateMaze(t,[t.getCell(s,i),t.getCell(s,i+1),t.getCell(s,i+2)]));if(l)continue;const o=new Uint16Array(t.cols);for(let i=0;i<t.cols;i++)o[i]=i+(s+2)*t.cols;r.forEach((i,n)=>{for(let a=0;a<i.length*.6;a++){let w=Math.floor(Math.random()*i.length),h=i[w];o[h]=n,this.animateMaze(t,[t.getCell(s,h),t.getCell(s+1,h),t.getCell(s+2,h)])}}),r=new Map,o.forEach((i,n)=>{if(n%2==1)return;const a=r.get(i);a?a.push(n):r.set(i,[n])}),e=o}}mergeSetInRow(t,e,r,s){s.set(e,[...s.get(e),...s.get(r)]),s.delete(r);for(let l=0;l<t.length;l+=2)t[l]==r&&(t[l]=e)}}const C=25,D=300;function F(){const c=window.innerWidth-D,t=window.innerHeight-D,e=Math.floor(c/C/2)*2+1;return{rows:Math.floor(t/C/2)*2+1,cols:e}}const{rows:W,cols:N}=F(),d=new k("board",W,N),z=new m;d.initializeElements();d.resetBoard();d.generateStartAndTarget();const O=document.getElementById("start-btn"),P=document.getElementById("reset-btn"),A=document.getElementById("algorithm-btn");z.initializeAlgorithmSelector(A);A.addEventListener("change",()=>{z.setAlgorithm(A.value)});P.addEventListener("click",()=>{d.resetBoard(),d.generateStartAndTarget()});O.addEventListener("click",()=>{d.clearBoard();const{visited_nodes:c,found_path:t}=z.findPath(d,d.start_cell,d.target_cell);d.visualizeVisitedNodes(c),d.visualizeFoundPath(t)});const I=new y,L=document.getElementById("maze-btn"),K=document.getElementById("generate-maze-btn");I.initializeMazeSelector(L);L.addEventListener("change",()=>{I.setAlgorithm(L.value)});K.addEventListener("click",()=>{I.generateMaze(d)});
